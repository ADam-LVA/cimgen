/*
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
*/
#include "CGMESProfile.hpp"

#include <list>
#include <map>
#include <string>

static const std::list<CGMESProfile> ProfileList =
{
{{#profiles}}
	CGMESProfile::{{short_name}},
{{/profiles}}
};

static const std::map<CGMESProfile, std::string> ProfileShortNames =
{
{{#profiles}}
	{ CGMESProfile::{{short_name}}, "{{short_name}}" },
{{/profiles}}
};

static const std::map<CGMESProfile, std::string> ProfileLongNames =
{
{{#profiles}}
	{ CGMESProfile::{{short_name}}, "{{long_name}}" },
{{/profiles}}
};

static const std::map<CGMESProfile, std::list<std::string>> ProfileURIs =
{
{{#profiles}}
	{ CGMESProfile::{{short_name}}, { {{#uris}}"{{uri}}", {{/uris}}} },
{{/profiles}}
};

static const std::string CimNamespace = "{{cim_namespace}}";

const std::list<CGMESProfile>&
getProfileList()
{
	return ProfileList;
}

std::string
getProfileShortName(CGMESProfile profile)
{
	auto it = ProfileShortNames.find(profile);
	if (it != ProfileShortNames.end())
	{
		return it->second;
	}
	return ""; // unknown profile
}

std::string
getProfileLongName(CGMESProfile profile)
{
	auto it = ProfileLongNames.find(profile);
	if (it != ProfileLongNames.end())
	{
		return it->second;
	}
	return ""; // unknown profile
}

const std::list<std::string>&
getProfileURIs(CGMESProfile profile)
{
	static std::list<std::string> empty_list;
	auto it = ProfileURIs.find(profile);
	if (it != ProfileURIs.end())
	{
		return it->second;
	}
	return empty_list; // unknown profile
}

CGMESProfile
getProfileFromShortName(const std::string& name)
{
	for (const auto& profile : ProfileShortNames)
	{
		if (name == profile.second)
		{
			return profile.first;
		}
	}
	return UnknownProfile;
}

CGMESProfile
getProfileFromLongName(const std::string& name)
{
	for (const auto& profile : ProfileLongNames)
	{
		if (name == profile.second)
		{
			return profile.first;
		}
	}
	return UnknownProfile;
}

std::string
getCimNamespace()
{
	return CimNamespace;
}
