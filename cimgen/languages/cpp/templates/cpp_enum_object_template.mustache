/*
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
*/
#include "{{class_name}}.hpp"

#include <ios>
#include <string>

#include "../src/CIMExceptions.hpp"

using namespace CIMPP;

{{class_name}}& {{class_name}}::operator=({{class_name}}_ENUM rop)
{
	value = rop;
	initialized = true;
	return *this;
}

{{class_name}}::operator {{class_name}}_ENUM() const
{
	if (!initialized)
	{
		throw new ReadingUninitializedField();
	}
	return value;
}

const char {{class_name}}::debugName[] = "{{class_name}}";
const char* {{class_name}}::debugString() const
{
	return {{class_name}}::debugName;
}

namespace CIMPP
{
	std::istream& operator>>(std::istream& lop, {{class_name}}& rop)
	{
		rop.initialized = false;

		std::string EnumSymbol;
		lop >> EnumSymbol;

		size_t pos = EnumSymbol.find_first_of('.');
		if(EnumSymbol.substr(0, pos) != "{{class_name}}")
		{
			lop.setstate(std::ios::failbit);
			return lop;
		}

		EnumSymbol = EnumSymbol.substr(pos + 1);

{{#enum_instances}}
		if(EnumSymbol == "{{label}}")
		{
			rop = {{class_name}}::{{label}};
			return lop;
		}
{{/enum_instances}}

		lop.setstate(std::ios::failbit);
		return lop;
	}

	std::ostream& operator<<(std::ostream& os, const {{class_name}}& obj)
	{
		if (obj.initialized)
		{
			std::string EnumSymbol;

{{#enum_instances}}
			if (obj.value == {{class_name}}::{{label}})
			{
				EnumSymbol = "{{label}}";
			}
{{/enum_instances}}

			if (!EnumSymbol.empty())
			{
				os << "{{class_name}}." << EnumSymbol;
			}
		}
		return os;
	}
}
