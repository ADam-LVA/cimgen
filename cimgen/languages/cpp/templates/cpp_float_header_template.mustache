#ifndef {{class_name}}_H
#define {{class_name}}_H

#include <string>
#include <istream>

#include "BaseClass.hpp"

namespace CIMPP
{
	class {{class_name}} : public BaseClass
	{

	public:
		{{class_name}}();
		virtual ~{{class_name}}();
		{{class_name}}(long double value);
		static const BaseClassDefiner declare();
		{{class_name}}& operator=(long double &rop);
		{{class_name}}& operator+=(const {{class_name}}& rhs);
		{{class_name}}& operator-=(const {{class_name}}& rhs);
		{{class_name}}& operator*=(const {{class_name}}& rhs);
		{{class_name}}& operator/=(const {{class_name}}& rhs);
		friend std::istream& operator>>(std::istream& lop, {{class_name}}& rop);
		operator long double();

		long double value = 0.0;
		bool initialized = false;

		static const char debugName[];
		const char* debugString() const override;

		static void addConstructToMap(std::unordered_map<std::string, BaseClass* (*)()>& factory_map);
		static void addPrimitiveAssignFnsToMap(std::unordered_map<std::string, assign_function>&);
		static void addClassAssignFnsToMap(std::unordered_map<std::string, class_assign_function>&);
	};
}
#endif
