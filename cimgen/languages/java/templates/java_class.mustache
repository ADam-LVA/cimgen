/*
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
*/

package cim4j;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

{{#class_comment}}
/**
 * {{{class_comment}}}
 */
{{/class_comment}}
public class {{class_name}} extends {{subclass_of}} {

	private static final Logging LOG = Logging.getLogger({{class_name}}.class);

	private BaseClass[] {{class_name}}_class_attributes;
	private BaseClass[] {{class_name}}_primitive_attributes;
	private java.lang.String rdfid;

	private static final Map<java.lang.String, java.lang.String> ATTRIBUTE_NAMES_MAP;
	static {
		ATTRIBUTE_NAMES_MAP = new {{class_name}}().getAttributeNamesMap();
	}

	private enum {{class_name}}_primitive_builder implements PrimitiveBuilder {
{{#attributes}}
{{#is_primitive_attribute}}
		{{> label}}() {
			public BaseClass construct(java.lang.String value) {
				return new {{attribute_class}}(value);
			}
		},
{{/is_primitive_attribute}}
{{#is_datatype_attribute}}
		{{> label}}() {
			public BaseClass construct(java.lang.String value) {
				return new {{attribute_class}}(value);
			}
		},
{{/is_datatype_attribute}}
{{#is_enum_attribute}}
		{{> label}}() {
			public BaseClass construct(java.lang.String value) {
				return new {{attribute_class}}(value);
			}
		},
{{/is_enum_attribute}}
{{/attributes}}
		LAST_ENUM() {
			public BaseClass construct(java.lang.String value) {
				return new Integer("0");
			}
		}
	}

	private enum {{class_name}}_class_attributes_enum {
{{#attributes}}
		{{> label}},
{{/attributes}}
		LAST_ENUM
	}

	public {{class_name}}() {
		{{class_name}}_primitive_attributes = new BaseClass[{{class_name}}_primitive_builder.values().length];
		{{class_name}}_class_attributes = new BaseClass[{{class_name}}_class_attributes_enum.values().length];
	}

	@Override
	public BaseClass construct() {
		return new {{class_name}}();
	}

	@Override
	public void setValue(java.lang.String s) {
		LOG.error(debugString() + " is not sure what to do with " + s);
	}

	@Override
	public void setRdfid(java.lang.String id) {
		rdfid = id;
	}

	@Override
	public java.lang.String getRdfid() {
		return rdfid;
	}

	private void updateAttributeInArray({{class_name}}_class_attributes_enum attrEnum, BaseClass value) {
		try {
			{{class_name}}_class_attributes[attrEnum.ordinal()] = value;
		} catch (ArrayIndexOutOfBoundsException aoobe) {
			LOG.error("No such attribute: " + attrEnum.name() + ": " + aoobe.getMessage());
		}
	}

	private void updateAttributeInArray({{class_name}}_primitive_builder attrEnum, BaseClass value) {
		try {
			{{class_name}}_primitive_attributes[attrEnum.ordinal()] = value;
		} catch (ArrayIndexOutOfBoundsException aoobe) {
			LOG.error("No such attribute: " + attrEnum.name() + ": " + aoobe.getMessage());
		}
	}

	@Override
	public void setAttribute(java.lang.String attrName, BaseClass value) {
		try {
			{{class_name}}_class_attributes_enum attrEnum = {{class_name}}_class_attributes_enum.valueOf(attrName);
			updateAttributeInArray(attrEnum, value);
			LOG.debug("Updated {{class_name}}, setting " + attrName);
		} catch (IllegalArgumentException iae) {
			super.setAttribute(attrName, value);
		}
	}

	@Override
	/* If the attribute is a String, it is a primitive and we will make it into a BaseClass */
	public void setAttribute(java.lang.String attrName, java.lang.String value) {
		try {
			{{class_name}}_primitive_builder attrEnum = {{class_name}}_primitive_builder.valueOf(attrName);
			updateAttributeInArray(attrEnum, attrEnum.construct(value));
			LOG.debug("Updated {{class_name}}, setting " + attrName + " to: " + value);
		} catch (IllegalArgumentException iae) {
			super.setAttribute(attrName, value);
		}
	}

	@Override
	public BaseClass getAttribute(java.lang.String attrName) {
		boolean defined = false;
		try {
			{{class_name}}_primitive_builder attrEnum = {{class_name}}_primitive_builder.valueOf(attrName);
			defined = true;
			BaseClass attrValue = {{class_name}}_primitive_attributes[attrEnum.ordinal()];
			if (attrValue != null) {
				return attrValue;
			}
		} catch (IllegalArgumentException ignored) {
		}

		try {
			{{class_name}}_class_attributes_enum attrEnum = {{class_name}}_class_attributes_enum.valueOf(attrName);
			defined = true;
			BaseClass attrValue = {{class_name}}_class_attributes[attrEnum.ordinal()];
			if (attrValue != null) {
				return attrValue;
			}
		} catch (IllegalArgumentException ignored) {
		}

		if (!defined) {
			return super.getAttribute(attrName);
		}
		return null;
	}

	@Override
	protected Map<java.lang.String, java.lang.String> getAttributeNamesMap() {
		Map<java.lang.String, java.lang.String> namesMap = new LinkedHashMap<>();
		for (var enumValue : {{class_name}}_primitive_builder.values()) {
			if (enumValue != {{class_name}}_primitive_builder.LAST_ENUM) {
				namesMap.put(enumValue.name(), "{{class_name}}." + enumValue.name());
			}
		}
		for (var enumValue : {{class_name}}_class_attributes_enum.values()) {
			if (enumValue != {{class_name}}_class_attributes_enum.LAST_ENUM) {
				namesMap.put(enumValue.name(), "{{class_name}}." + enumValue.name());
			}
		}
		namesMap.putAll(super.getAttributeNamesMap());
		return namesMap;
	}

	@Override
	public Set<java.lang.String> getAttributeNames() {
		return ATTRIBUTE_NAMES_MAP.keySet();
	}

	@Override
	public java.lang.String getAttributeFullName(java.lang.String attrName) {
		return ATTRIBUTE_NAMES_MAP.get(attrName);
	}

	@Override
	public java.lang.String toString(boolean topClass) {
		java.lang.String result = "";
		if (topClass) {
			for ({{class_name}}_primitive_builder attrEnum : {{class_name}}_primitive_builder.values()) {
				BaseClass bc = {{class_name}}_primitive_attributes[attrEnum.ordinal()];
				if (bc != null) {
					result += "    {{class_name}}." + attrEnum.name() + "(" + bc.debugString() + ")" + " " + bc.toString(false) + System.lineSeparator();
				}
			}
			for ({{class_name}}_class_attributes_enum attrEnum : {{class_name}}_class_attributes_enum.values()) {
				BaseClass bc = {{class_name}}_class_attributes[attrEnum.ordinal()];
				if (bc != null) {
					result += "    {{class_name}}." + attrEnum.name() + "(" + bc.debugString() + ")" + " " + bc.toString(false) + System.lineSeparator();
				}
			}
			result += super.toString(true);
		} else {
			result += "({{class_name}}) RDFID: " + rdfid;
		}
		return result;
	}

	private final java.lang.String debugName = "{{class_name}}";

	@Override
	public java.lang.String debugString() {
		return debugName;
	}

	/**
	 * Get the namespace URL of an object of this class.
	 *
	 * @return The namespace URL
	 */
	@Override
	public java.lang.String getClassNamespaceUrl() {
		return "{{class_namespace}}";
	}

	/**
	 * Get the namespace URL of an attribute (also for inherited attributes).
	 *
	 * @return The namespace URL
	 */
	@Override
	public java.lang.String getAttributeNamespaceUrl(java.lang.String attrName) {
		return ATTR_NAMESPACE_MAP.get(attrName);
	}

	private static final Map<java.lang.String, java.lang.String> ATTR_NAMESPACE_MAP;
	static {
		ATTR_NAMESPACE_MAP = new {{class_name}}().allAttrNamespaceMap();
	}

	@Override
	protected Map<java.lang.String, java.lang.String> allAttrNamespaceMap() {
		Map<java.lang.String, java.lang.String> map = new LinkedHashMap<>(classAttrNamespaceMap);
		map.putAll(super.allAttrNamespaceMap());
		map.remove("LAST_ATTRIBUTE");
		return map;
	}

	private Map<java.lang.String, java.lang.String> classAttrNamespaceMap = Map.ofEntries(
{{#attributes}}
			Map.entry("{{> label}}", "{{attribute_namespace}}"),
{{/attributes}}
			Map.entry("LAST_ATTRIBUTE", ""));
}
