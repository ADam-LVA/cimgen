/*
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
*/

package cim4j;

{{#class_comment}}
/**
 * {{{class_comment}}}
 */
{{/class_comment}}
public class {{class_name}} extends {{sub_class_of}} {

	private BaseClass[] {{class_name}}_class_attributes;
	private BaseClass[] {{class_name}}_primitive_attributes;
	private java.lang.String rdfid;

	private enum {{class_name}}_primitive_builder implements PrimitiveBuilder {
{{#attributes}}
{{#is_primitive_attribute}}
		{{> label}}() {
			public BaseClass construct(java.lang.String value) {
				return new {{attribute_class}}(value);
			}
		},
{{/is_primitive_attribute}}
{{#is_enum_attribute}}
		{{> label}}() {
			public BaseClass construct(java.lang.String value) {
				return new {{attribute_class}}(value);
			}
		},
{{/is_enum_attribute}}
{{/attributes}}
		LAST_ENUM() {
			public BaseClass construct(java.lang.String value) {
				return new Integer("0");
			}
		}
	}

	private enum {{class_name}}_class_attributes_enum {
{{#attributes}}
		{{> label}},
{{/attributes}}
		LAST_ENUM
	}

	public {{class_name}}() {
		{{class_name}}_primitive_attributes = new BaseClass[{{class_name}}_primitive_builder.values().length];
		{{class_name}}_class_attributes = new BaseClass[{{class_name}}_class_attributes_enum.values().length];
	}

	@Override
	public BaseClass construct() {
		return new {{class_name}}();
	}

	@Override
	public void setValue(java.lang.String s) {
		System.out.println(debugString() + " is not sure what to do with " + s);
	}

	@Override
	public void setRdfid(java.lang.String id) {
		rdfid = id;
	}

	private void updateAttributeInArray({{class_name}}_class_attributes_enum attrEnum, BaseClass value) {
		try {
			{{class_name}}_class_attributes[attrEnum.ordinal()] = value;
		} catch (ArrayIndexOutOfBoundsException aoobe) {
			System.out.println("No such attribute: " + attrEnum.name() + ": " + aoobe.getMessage());
		}
	}

	private void updateAttributeInArray({{class_name}}_primitive_builder attrEnum, BaseClass value) {
		try {
			{{class_name}}_primitive_attributes[attrEnum.ordinal()] = value;
		} catch (ArrayIndexOutOfBoundsException aoobe) {
			System.out.println("No such attribute: " + attrEnum.name() + ": " + aoobe.getMessage());
		}
	}

	@Override
	public void setAttribute(java.lang.String attrName, BaseClass value) {
		try {
			{{class_name}}_class_attributes_enum attrEnum = {{class_name}}_class_attributes_enum.valueOf(attrName);
			updateAttributeInArray(attrEnum, value);
			System.out.println("Updated {{class_name}}, setting " + attrName);
		} catch (IllegalArgumentException iae) {
			super.setAttribute(attrName, value);
		}
	}

	@Override
	/* If the attribute is a String, it is a primitive and we will make it into a BaseClass */
	public void setAttribute(java.lang.String attrName, java.lang.String value) {
		try {
			{{class_name}}_primitive_builder attrEnum = {{class_name}}_primitive_builder.valueOf(attrName);
			updateAttributeInArray(attrEnum, attrEnum.construct(value));
			System.out.println("Updated {{class_name}}, setting " + attrName + " to: " + value);
		} catch (IllegalArgumentException iae) {
			super.setAttribute(attrName, value);
		}
	}

	@Override
	public java.lang.String toString(boolean topClass) {
		java.lang.String result = "";
		if (topClass) {
			for ({{class_name}}_primitive_builder attrEnum : {{class_name}}_primitive_builder.values()) {
				BaseClass bc = {{class_name}}_primitive_attributes[attrEnum.ordinal()];
				if (bc != null) {
					result += "    {{class_name}}." + attrEnum.name() + "(" + bc.debugString() + ")" + " " + bc.toString(false) + System.lineSeparator();
				}
			}
			for ({{class_name}}_class_attributes_enum attrEnum : {{class_name}}_class_attributes_enum.values()) {
				BaseClass bc = {{class_name}}_class_attributes[attrEnum.ordinal()];
				if (bc != null) {
					result += "    {{class_name}}." + attrEnum.name() + "(" + bc.debugString() + ")" + " " + bc.toString(false) + System.lineSeparator();
				}
			}
			result += super.toString(true);
		} else {
			result += "({{class_name}}) RDFID: " + rdfid;
		}
		return result;
	}

	private final java.lang.String debugName = "{{class_name}}";

	@Override
	public java.lang.String debugString() {
		return debugName;
	}
}
