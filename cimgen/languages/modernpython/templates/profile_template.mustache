"""
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
"""

from enum import Enum
from functools import cached_property


class BaseProfile(str, Enum):
    """
    Profile parent. Use it if you need your own profiles.

    All CGMES objects requiring a Profile are actually asking for a `BaseProfile`. As
    Enum with fields cannot be inherited or composed, just create your own CustomProfile without
    trying to extend Profile. It will work.
    """

    @cached_property
    def long_name(self) -> str:
        """Return the long name of the profile."""
        return self.value

    @cached_property
    def uris(self) -> list[str]:
        """Return the list of uris of the profile."""
        raise NotImplementedError("Method has to be implemented in subclass.")

    def __lt__(self, other):
        if not isinstance(other, self.__class__):
            return str(self.__class__) < str(other.__class__)
        order = list(self.__class__)
        return order.index(self) < order.index(other)

    def __gt__(self, other):
        return other < self

    def __le__(self, other):
        return self == other or self < other

    def __ge__(self, other):
        return self == other or self > other


class Profile(BaseProfile):
    """
    Enum containing all CGMES profiles and their export priority.
    """

    {{#profiles}}
    {{short_name}} = "{{long_name}}"
    {{/profiles}}

    @cached_property
    def uris(self) -> list[str]:
        """Return the list of uris of the profile."""
        return profile_uris[self.name]


profile_uris: dict[str, list[str]] = {  # Those are strings, not real addresses, hence the NOSONAR.
    {{#profiles}}
    "{{short_name}}": [
        {{#uris}}
        "{{uri}}",  # NOSONAR
        {{/uris}}
    ],
    {{/profiles}}
}
