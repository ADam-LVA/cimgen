#ifndef {{class_name}}_H
#define {{class_name}}_H

#include "{{sub_class_of}}.hpp"
#include <list>
#include "Boolean.hpp"
#include "Float.hpp"

{{#langPack._create_attribute_includes}}{{attributes}}{{/langPack._create_attribute_includes}}

/*
{{{class_comment}}}
*/
class {{class_name}}: public {{sub_class_of}}
{
enum class {{class_name}}Enum {
{{#instances}}
	{{label}},
{{/instances}}
};

public:
	{{#attributes}}
		{{> attribute}} _{{label}}; 	/* {{comment}} Default: {{#langPack._set_default}}{{dataType}}{{/langPack._set_default}} */
	{{/attributes}}
	
	static const char debugName[];
	virtual const char* debugString();
	
	/* constructor initialising all attributes to null */
	{{class_name}}();
	virtual ~{{class_name}}();

	static void addConstructToMap(std::unordered_map<std::string, BaseClass* (*)()>& factory_map);
	static void addPrimitiveAssignFnsToMap(std::unordered_map<std::string, assign_function>&);
	static void addClassAssignFnsToMap(std::unordered_map<std::string, class_assign_function>&);
	static const BaseClassDefiner define();

};

BaseClass* {{class_name}}_factory();

#endif
