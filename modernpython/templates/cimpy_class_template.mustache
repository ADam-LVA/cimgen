"""
Generated from the CGMES 3 files via cimgen: https://github.com/sogno-platform/cimgen
"""

import sys
from types import ModuleType

from functools import cached_property
from typing import Optional
from pydantic import Field
from pydantic.dataclasses import dataclass
from ..utils.dataclassconfig import DataclassConfig
from ..utils.profile import BaseProfile, Profile

from {{class_location}} import {{sub_class_of}}

@dataclass(config=DataclassConfig)
class {{class_name}}({{sub_class_of}}, ModuleType):
    """
    {{{wrapped_class_comment}}}

    {{#attributes}}
    {{label}}: {{{wrapped_comment}}}
    {{/attributes}}
    """
    def __call__(self, *args, **kwargs):
        # Dark magic - see last lines of the file.
        return {{class_name}}(*args, **kwargs)

    {{#attributes}}
    {{^isAssociationUsed}}# *Association not used*
    # Type {{dataType}} in CIM  # pylint: disable-next=line-too-long
    # {{/isAssociationUsed}}{{label}} : {{#setType}}{{dataType}}{{/setType}} = Field({{#setDefault}}{{dataType}}{{/setDefault}}, in_profiles = [{{#attr_origin}}Profile.{{origin}}, {{/attr_origin}}]) {{^isAssociationUsed}}# noqa: E501{{/isAssociationUsed}}

    {{/attributes}}
    {{^attributes}}
    # No attributes defined for this class.
    {{/attributes}}


    @cached_property
    def possible_profiles(self)->set[BaseProfile]:
        """
        A resource can be used by multiple profiles. This is the set of profiles
        where this element can be found.
        """
        return { {{#class_origin}}Profile.{{origin}}, {{/class_origin}} }

# This + inheriting from ModuleType + __call__:
# makes:
# "import {{class_name}}"
# work as well as
# "from {{class_name}} import {{class_name}}".
# You would get a typechecker "not callable" error, but this might be useful for
# backward compatibility.
sys.modules[__name__].__class__ = {{class_name}}